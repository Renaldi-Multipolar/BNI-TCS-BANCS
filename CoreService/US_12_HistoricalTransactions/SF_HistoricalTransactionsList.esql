BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common,id.co.bni.mf.common.core;

/*
 *
 * File name: SF_HistoricalTransactions.esql
 *
 * Purpose  : Transfrom Message Response Historical Transaction from ICONS (BANCS format) to XML format
 *
 * Authors  : Elisabeth Sitanggang
 *            
 * Date     : March 2011
 * Version  : 1.0
 *
 * @copyright  PT Bank Negara Indonesia. 2011.  All rights reserved.
 *
 */


DECLARE LB_RES_ACC_MISMATCH CONSTANT CHAR 'ResAccMismatch';


/*
 * This module used to divide length of message response Historical Transaction from ICONS
 * Response message consist of ICONS Header,Record Header, Record Data, and Last Record Data
 * Broker will read length of all messages from WSRR
 */
CREATE COMPUTE MODULE HistoricalTransactionsFlow_divideMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE totalLengthMsg,totalBodyLength,numberRecordData,cutRecordHeader,cutStartRecordData,cutEndRecordData INTEGER;
		DECLARE MessageBody,RecordHeaderMsg,newRecord ROW;
		DECLARE headerLength INTEGER 89;
		DECLARE recordHeaderLength INTEGER 270; --[filler 6 	+ data 264]
		DECLARE recordDataLength INTEGER 601; 	--[filler 25 	+ data 576]
		DECLARE lastRecordDataLength INTEGER 82;--[filler 6 	+ data 76]
		DECLARE index INTEGER 1;
		DECLARE flag BOOLEAN FALSE;
		
		CALL CopyMessageHeaders();
		
		SET totalLengthMsg								= LENGTH(InputRoot.BLOB.BLOB);
		SET cutStartRecordData  						= headerLength + recordHeaderLength + 1;
		SET totalBodyLength 							= totalLengthMsg - headerLength;
		SET Environment.Variables.indexRecordData 		= 1;
		SET cutRecordHeader								= headerLength + 1;
		
		
		--SET MessageBody      							= SUBSTRING(InputRoot.BLOB.BLOB FROM 0 FOR totalLengthMsg);
		SET MessageBody      							= InputRoot.BLOB.BLOB;
		SET numberRecordData 							= ((totalLengthMsg - (headerLength+recordHeaderLength+lastRecordDataLength))/recordDataLength)+2;
		SET Environment.Variables.IndexLastRecordData 	= numberRecordData; 
		
		WHILE index <= numberRecordData DO
			IF index=1 THEN
				SET newRecord 									= SUBSTRING(MessageBody FROM cutRecordHeader FOR recordHeaderLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				
				-- parse RecordHeader
				PROPAGATE TO LABEL 'RecordHeader' FINALIZE DEFAULT DELETE NONE;
				
				-- start filter
				DECLARE refMsgId 	CHAR InputRoot.MQMD.MsgId;
				DECLARE reqAccNo	CHAR Environment.request.historicalAccountNum;
				DECLARE resAccNo	CHAR Environment.response.historicalAccountNum;
				
				CALL writeLog(refMsgId, ':debug.list.trx.res: Account Number : ' || resAccNo, 'DEBUG');
				IF (reqAccNo <> resAccNo) THEN
					
					DECLARE errLog CHAR 'Request response account no mismatch ' || reqAccNo || ' <> ' || resAccNo;
					
					CALL writeLog(refMsgId, errLog, 'FATAL');
					PROPAGATE TO LABEL LB_RES_ACC_MISMATCH;
					
					RETURN FALSE;
				END IF;
				-- end filter
				
				
			ELSEIF index = numberRecordData THEN
				SET Environment.Variables.indexRecordData 		= numberRecordData;
				SET Environment.Variables.IndexLastRecordData 	= numberRecordData;
				DECLARE numRecordData INTEGER;
				SET numRecordData = numberRecordData - 2;
				DECLARE cut INTEGER;
				SET cut = headerLength + recordHeaderLength + 1 + (numRecordData*recordDataLength);
				SET newRecord  									= SUBSTRING(MessageBody FROM cut FOR lastRecordDataLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET flag										= TRUE;
				SET Environment.Variables.flag 					= flag;
				PROPAGATE TO LABEL 'LastRecordData' FINALIZE DEFAULT DELETE NONE;
			ELSE
				SET Environment.Variables.indexRecordData 		= index;
				SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR recordDataLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET cutEndRecordData 							= cutStartRecordData + recordDataLength;
				SET cutStartRecordData							= cutEndRecordData;
				PROPAGATE TO LABEL 'RecordData' FINALIZE DEFAULT DELETE NONE;
			END IF;
			SET index = index + 1;	
		END WHILE;
		RETURN TRUE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


END MODULE;


/*
 * This module used to parse message response HistoricalTransaction  
 */
CREATE COMPUTE MODULE HistoricalTransactionsFlow_messageTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE xsi NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo NAMESPACE 'http://service.bni.co.id/core/bo';
		
		DECLARE index 		REFERENCE TO Environment.Variables.indexRecordData;
		DECLARE lastIndex	REFERENCE TO Environment.Variables.IndexLastRecordData;
		DECLARE flag  		REFERENCE TO Environment.Variables.flag;

		-- variable last record
		DECLARE beginingBalance			CHARACTER;
		DECLARE creditsTotal			CHARACTER;
		DECLARE debitsTotal				CHARACTER;
		DECLARE endingBalance			CHARACTER;
		CALL CopyMessageHeaders();
		IF index = 1 THEN

			SET Environment.response.historicalAccountNum = InputRoot.MRM.recordHeader.accountNum;

			DECLARE X INTEGER;
			DECLARE Y INTEGER 1;
			DECLARE reffRecordHeader reference to InputRoot.MRM.recordHeader.*[1];
			WHILE(LASTMOVE(reffRecordHeader)) DO
				--DECLARE fieldName 		CHAR FIELDNAME(InputRoot.MRM.recordHeader.*[Y]);
				DECLARE fieldName 		CHAR FIELDNAME(reffRecordHeader);
				SET Environment.Variables.content.{fieldName} 	= InputRoot.MRM.recordHeader.{fieldName};
				--SET Y = Y + 1;
				MOVE reffRecordHeader NEXTSIBLING;
			END WHILE;
			--DECLARE fieldFiller 	CHAR FIELDNAME(InputRoot.MRM.recordHeader.filler);
			SET Environment.Variables.content.filler	= NULL;
		 ELSEIF index < lastIndex THEN
			DECLARE indexRecord INTEGER;
			SET indexRecord = index - 1;
			SET  Environment.Variables.content.longHistoricals[indexRecord]			= InputRoot.MRM.longHistoricals;
			
			DECLARE reffDataAmount REFERENCE TO Environment.Variables.content.longHistoricals[indexRecord].amount;
			CALL replaceMinus(reffDataAmount,reffDataAmount);
			
			DECLARE reffDataBalance REFERENCE TO Environment.Variables.content.longHistoricals[indexRecord].balance;
			CALL replaceMinus(reffDataBalance,reffDataBalance);
			
			DECLARE dateValue    REFERENCE TO Environment.Variables.content.longHistoricals[indexRecord].date;
			IF SUBSTRING(dateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.longHistoricals[indexRecord].date = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.longHistoricals.date AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'yyyy-MM-dd');
				SET Environment.Variables.content.longHistoricals[indexRecord].date = date2;
			END IF;			
					
			
			SET  Environment.Variables.content.longHistoricals[indexRecord].filler		= NULL;
			SET  Environment.Variables.content.longHistoricals[indexRecord].filler2		= NULL;
		 ELSEIF index = lastIndex THEN
			DECLARE A INTEGER;
			DECLARE B INTEGER 1;
			--SET A = CARDINALITY(InputRoot.MRM.lastRecordData.*[]);
			DECLARE reffLastRecordData reference to InputRoot.MRM.lastRecordData.*[1];
			--WHILE B <= A DO
			WHILE(LASTMOVE(reffLastRecordData)) DO
				DECLARE fieldName2 		CHAR FIELDNAME(reffLastRecordData);
				SET Environment.Variables.content.{fieldName2}							= InputRoot.MRM.lastRecordData.{fieldName2};
				
				DECLARE reffDataBeginingBalance REFERENCE TO Environment.Variables.content.beginingBalance;
				CALL replaceMinus(reffDataBeginingBalance,reffDataBeginingBalance);
				
				DECLARE reffDataCreditsTotal REFERENCE TO Environment.Variables.content.creditsTotal;
				CALL replaceMinus(reffDataCreditsTotal,reffDataCreditsTotal);
				
				DECLARE reffDataDebitsTotal REFERENCE TO Environment.Variables.content.debitsTotal;
				CALL replaceMinus(reffDataDebitsTotal,reffDataDebitsTotal);
				
				DECLARE reffDataEndingBalance REFERENCE TO Environment.Variables.content.endingBalance;
				CALL replaceMinus(reffDataEndingBalance,reffDataEndingBalance);
				
				--SET B = B + 1;
				MOVE reffLastRecordData NEXTSIBLING;
			END WHILE;
			--DECLARE fieldFiller2 	CHAR FIELDNAME(InputRoot.MRM.lastRecordData.filler);
			SET Environment.Variables.content.filler		= NULL;
		END IF;
		
		IF flag = TRUE THEN	
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			SET OutputRoot.XMLNSC.content 												= Environment.Variables.content;	
			
			DECLARE fromDateValue    REFERENCE TO OutputRoot.XMLNSC.content.fromDate;
			IF SUBSTRING(fromDateValue FROM 1 FOR 2) > 31 THEN	
				SET OutputRoot.XMLNSC.content.fromDate = '';
			ELSE
				DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.fromDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'yyyy-MM-dd');
				SET OutputRoot.XMLNSC.content.fromDate = date2;
			END IF;
			
			DECLARE toDateValue    REFERENCE TO OutputRoot.XMLNSC.content.toDate;
			IF SUBSTRING(toDateValue FROM 1 FOR 2) > 31 THEN	
				SET OutputRoot.XMLNSC.content.toDate = '';
			ELSE
				DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.toDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'yyyy-MM-dd');
				SET OutputRoot.XMLNSC.content.toDate = date2;
			END IF;
														
			SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 				= xsi;
			SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 					= 'bo:CompiledHistoricalTransactionsRes'; 
		ELSE
			RETURN FALSE;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


END MODULE;


CREATE COMPUTE MODULE SF_HistoricalTransactionsList_CN_composeAccMistmatchErr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();

		DECLARE outMsg REFERENCE TO OutputRoot;
						
		-- ICON send ok message if there are no record to display, so we need to compose new fault message to inform that
		CALL composeAppFault('9412', 'Transaksi tidak dapat diproses, silahkan dicoba lagi.', outMsg);

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
