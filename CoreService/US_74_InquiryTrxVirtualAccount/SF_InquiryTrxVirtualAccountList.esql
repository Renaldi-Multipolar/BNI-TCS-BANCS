BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common,id.co.bni.mf.common.core;

/*
 * This module used to divide length of message response Inquiry Transaction Virtual Account from ICONS
 * Response message consist of ICONS Header,Record Header, Record Data, and Last Record Data
 * Broker will read length of all messages from WSRR
 */
CREATE COMPUTE MODULE InquiryTrxVirtualAccountFlow_divideMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE totalLengthMsg,totalBodyLength,numberRecordData,cutRecordHeader,cutStartRecordData,cutEndRecordData INTEGER;
		DECLARE MessageBody,RecordHeaderMsg,newRecord ROW;
		DECLARE headerLength INTEGER 89;--panjang dari message header
		DECLARE recordDataLength INTEGER 126; -- panjang dari response message
		DECLARE lastRecordDataLength INTEGER 219;--(211+ filler(8)) filler merupakan selisih dari panjang message response-total panjang yang ada di xml transaction
		DECLARE fillerLastMessage INTEGER 126;
		DECLARE index INTEGER 1;
		DECLARE flag BOOLEAN FALSE;
		
		CALL CopyMessageHeaders();
		
		SET totalLengthMsg								= LENGTH(InputRoot.BLOB.BLOB); --input message berupa blob
		SET cutStartRecordData  						= headerLength +1;
		SET totalBodyLength 							= totalLengthMsg - headerLength;
		SET Environment.Variables.indexRecordData 	    = 1;
		SET cutRecordHeader								= headerLength + 1;
		
		SET MessageBody      							= InputRoot.BLOB.BLOB;
		SET numberRecordData 							= ((totalLengthMsg - (headerLength+lastRecordDataLength))/recordDataLength)+1;
		SET Environment.Variables.IndexLastRecordData 	= numberRecordData;
		
		WHILE index <= numberRecordData DO
		
		  IF index < numberRecordData THEN
				SET Environment.Variables.indexRecordData 		= index;
				SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR recordDataLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET cutEndRecordData 							= cutStartRecordData + recordDataLength;
				SET cutStartRecordData							= cutEndRecordData;
				PROPAGATE TO LABEL 'trxVirtualAccount' FINALIZE DEFAULT DELETE NONE;
			
		  ELSEIF index = numberRecordData THEN
				SET Environment.Variables.indexRecordData 		= index;
				SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR lastRecordDataLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET cutEndRecordData 							= cutStartRecordData + lastRecordDataLength;
				SET cutStartRecordData							= cutEndRecordData;
				SET flag										= TRUE;
				SET Environment.Variables.flag 					= flag;

				PROPAGATE TO LABEL 'virtualAccountInformation' FINALIZE DEFAULT DELETE NONE;
			END IF;
			
			SET index = index + 1;	
			
		END WHILE;
		RETURN TRUE;
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


END MODULE;


/*
 * This module used to parse message response InquiryTrxVirtualAccount 
 */
CREATE COMPUTE MODULE InquiryTrxVirtualAccountFlow_messageTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE xsi NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo NAMESPACE 'http://service.bni.co.id/core/bo';
		
		DECLARE index 		REFERENCE TO Environment.Variables.indexRecordData;
		DECLARE lastIndex	REFERENCE TO Environment.Variables.IndexLastRecordData;
		DECLARE flag  		REFERENCE TO Environment.Variables.flag;

		/*DECLARE frDate				CHARACTER;
		DECLARE toDate				CHARACTER;*/
		
		
		CALL CopyMessageHeaders();
		--Parse messages to msxd VAInfo while index start from 1 to lastindex
         IF index < lastIndex THEN
			DECLARE indexRecord INTEGER;
			--SET indexRecord = index - 1;
			SET indexRecord = index;
			--SET Environment.Variables.content.trxVirtualAccount[indexRecord] = InputRoot.MRM.trxVirtualAccount;
			
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTxnType = InputRoot.MRM.trxVirtualAccount.colTxnType;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colPostDate = InputRoot.MRM.trxVirtualAccount.colPostDate;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTranDate = InputRoot.MRM.trxVirtualAccount.colTranDate;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTranTime = InputRoot.MRM.trxVirtualAccount.colTranTime;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTranCode = InputRoot.MRM.trxVirtualAccount.colTranCode;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colJournalNum = InputRoot.MRM.trxVirtualAccount.colJournalNum;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colUserID = InputRoot.MRM.trxVirtualAccount.colUserID;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colBranch = InputRoot.MRM.trxVirtualAccount.colBranch;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].colAmount = InputRoot.MRM.trxVirtualAccount.colAmount;
			SET Environment.Variables.content.trxVirtualAccount[indexRecord].desc = InputRoot.MRM.trxVirtualAccount.desc;
			--edit format
			DECLARE colPostDateValue    REFERENCE TO Environment.Variables.content.trxVirtualAccount[indexRecord].colPostDate;
			IF SUBSTRING(colPostDateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.trxVirtualAccount[indexRecord].colPostDate = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.trxVirtualAccount.colPostDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'dd/MM/yyyy');
				SET Environment.Variables.content.trxVirtualAccount[indexRecord].colPostDate = date2;
			END IF;
			
			DECLARE colTranDateValue    REFERENCE TO Environment.Variables.content.trxVirtualAccount[indexRecord].colTranDate;
			IF SUBSTRING(colTranDateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTranDate = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.trxVirtualAccount.colTranDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'dd/MM/yyyy');
				SET Environment.Variables.content.trxVirtualAccount[indexRecord].colTranDate = date2;
			END IF;
		 --edit date format
		 
		
		--Parse messages to mxsd VATailData while index=lastindex	
		 
		ELSEIF index = lastIndex THEN
			DECLARE A INTEGER;
			DECLARE B INTEGER 1;
		
			DECLARE reffvirtualAccountInformation reference to InputRoot.MRM.virtualAccountInformation.*[1];
			
			WHILE(LASTMOVE(reffvirtualAccountInformation)) DO
				DECLARE fieldName2 		CHAR FIELDNAME(reffvirtualAccountInformation);
				SET Environment.Variables.content.{fieldName2} = InputRoot.MRM.virtualAccountInformation.{fieldName2};
	
				MOVE reffvirtualAccountInformation NEXTSIBLING;
			END WHILE;
		SET Environment.Variables.content.filler		= NULL;
		SET Environment.Variables.content.function		= NULL;

		END IF;
		
		--when flag is true, it's last message and ready parse to xml format by read xml document in wsrr
		IF flag = TRUE THEN	
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			SET OutputRoot.XMLNSC.content 												= Environment.Variables.content;
										
			SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 				= xsi;
			SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 					= 'bo:CompiledInquiryTrxVirtualAccountRes'; 
		ELSE
			RETURN FALSE;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;


END MODULE;
