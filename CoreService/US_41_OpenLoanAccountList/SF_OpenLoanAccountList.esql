BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common,id.co.bni.mf.common.core;
/*
 *
 * File name: SF_OpenAccountList.esql
 *
 * Purpose  : Transfrom Message Response OpenAccountList from ICONS (BANCS) to XML format
 *
 * Authors  : Elisabeth Sitanggang
 *            
 * Date     : September 2012
 * Version  : 1.0
 *
 * @copyright  PT Bank Negara Indonesia. 2011.  All rights reserved.
 *
 */


CREATE COMPUTE MODULE SF_OpenLoanAccountList_CN_divideMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	DECLARE totalLengthMsg,totalBodyLength,numberRecordData,cutRecordHeader,cutStartRecordData,cutEndRecordData INTEGER;
		DECLARE MessageBody,RecordHeaderMsg,newRecord ROW;
		DECLARE headerLength 				INTEGER 89;
		--DECLARE headerOpenLoanLength 	INTEGER 169; --test add nomer hape 20 digit
		DECLARE headerOpenLoanLength 	INTEGER 189;
		DECLARE contentOpenLoanAccLength 	INTEGER 191; 
		DECLARE footerOpenLoanAccLength 	INTEGER 63;
		DECLARE index INTEGER 1;
		DECLARE flag BOOLEAN FALSE;
		
		CALL CopyMessageHeaders();
		SET totalLengthMsg			= LENGTH(InputRoot.BLOB.BLOB);
		SET cutStartRecordData  	= headerLength + headerOpenLoanLength + 1;
		SET totalBodyLength 		= totalLengthMsg - headerLength;
		SET cutRecordHeader			= headerLength + 1;
		SET Environment.Variables.IndexContentOpenLoanAcc 	= 1;
		
		--SET MessageBody      							= SUBSTRING(InputRoot.BLOB.BLOB FROM 0 FOR totalLengthMsg);
		SET MessageBody      							= InputRoot.BLOB.BLOB;
		SET numberRecordData 							= ((totalLengthMsg - (headerLength+headerOpenLoanLength+footerOpenLoanAccLength))/contentOpenLoanAccLength)+2;
		SET Environment.Variables.IndexFooterOpenLoanAcc= numberRecordData; 
		
		WHILE index <= numberRecordData DO
			IF index=1 THEN
				SET newRecord 									= SUBSTRING(MessageBody FROM cutRecordHeader FOR headerOpenLoanLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				-- parse RecordHeader
				PROPAGATE TO LABEL 'HeaderOpenLoan' FINALIZE DEFAULT DELETE NONE;
			ELSEIF index = numberRecordData THEN
				SET Environment.Variables.IndexContentOpenLoanAcc= numberRecordData;
				SET Environment.Variables.IndexFooterOpenLoanAcc = numberRecordData;
				DECLARE numRecordData INTEGER;
				SET numRecordData = numberRecordData - 2;
				DECLARE cut INTEGER;
				SET cut = headerLength + headerOpenLoanLength + 1 + (numRecordData*contentOpenLoanAccLength );
				SET newRecord  									= SUBSTRING(MessageBody FROM cut FOR footerOpenLoanAccLength);
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET flag										= TRUE;
				SET Environment.Variables.flag 					= flag;
				PROPAGATE TO LABEL 'FooterOpenLoanAcc' FINALIZE DEFAULT DELETE NONE;
			ELSE
				SET Environment.Variables.IndexContentOpenLoanAcc 		= index;
				SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR contentOpenLoanAccLength );
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET cutEndRecordData 							= cutStartRecordData + contentOpenLoanAccLength;
				SET cutStartRecordData							= cutEndRecordData;
				PROPAGATE TO LABEL 'ContentOpenLoanAcc' FINALIZE DEFAULT DELETE NONE;
			END IF;
			SET index = index + 1;	
		END WHILE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE SF_OpenLoanAccountList_CN_messageTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE xsi NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo NAMESPACE 'http://service.bni.co.id/core/bo';
		
		DECLARE index 		REFERENCE TO Environment.Variables.IndexContentOpenLoanAcc;
		DECLARE lastIndex	REFERENCE TO Environment.Variables.IndexFooterOpenLoanAcc;
		DECLARE flag  		REFERENCE TO Environment.Variables.flag;

		CALL CopyMessageHeaders();
		IF index = 1 THEN
			DECLARE reffHeaderOpenLoan reference to InputRoot.MRM.headerOpenLoanAcc.*[1];
			WHILE(LASTMOVE(reffHeaderOpenLoan)) DO
				DECLARE fieldName 		CHAR FIELDNAME(reffHeaderOpenLoan);
				IF NOT fieldName = 'dummy' THEN
					SET Environment.Variables.content.{fieldName} 	= InputRoot.MRM.headerOpenLoanAcc.{fieldName};
				END IF;
				MOVE reffHeaderOpenLoan NEXTSIBLING;
			END WHILE;
		 ELSEIF index < lastIndex THEN
			DECLARE indexRecord INTEGER;
			SET indexRecord = index - 1;
			SET  Environment.Variables.content.openLoanAccountInfo[indexRecord]			= InputRoot.MRM.openLoanAccountInfo;
			
			IF Environment.Variables.content.openLoanAccountInfo[indexRecord].accountTypeCode 		= 'B' THEN
				SET Environment.Variables.content.openLoanAccountInfo[indexRecord].accountTypeCode 	= 'LON';		
			END IF;
			
			DECLARE arrDateValue    REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].arrDate;
			IF SUBSTRING(arrDateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.openLoanAccountInfo[indexRecord].arrDate = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.openLoanAccountInfo.arrDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'yyyy-MM-dd');
				SET Environment.Variables.content.openLoanAccountInfo[indexRecord].arrDate = date2;
			END IF;
			
			DECLARE maturityDateValue    REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].maturityDate;
			IF SUBSTRING(maturityDateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.openLoanAccountInfo[indexRecord].maturityDate = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.openLoanAccountInfo.maturityDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'yyyy-MM-dd');
				SET Environment.Variables.content.openLoanAccountInfo[indexRecord].maturityDate = date2;
			END IF;
			
			SET Environment.Variables.content.openLoanAccountInfo[indexRecord].approveAmount =
				TRIM(' ' FROM Environment.Variables.content.openLoanAccountInfo[indexRecord].approveAmount);
			SET Environment.Variables.content.openLoanAccountInfo[indexRecord].outsatndingAmount =
				TRIM(' ' FROM Environment.Variables.content.openLoanAccountInfo[indexRecord].outsatndingAmount);
			SET Environment.Variables.content.openLoanAccountInfo[indexRecord].arrear =
				TRIM(' ' FROM Environment.Variables.content.openLoanAccountInfo[indexRecord].arrear);
			SET Environment.Variables.content.openLoanAccountInfo[indexRecord].effectiveBalance =
				TRIM(' ' FROM Environment.Variables.content.openLoanAccountInfo[indexRecord].effectiveBalance);
			SET Environment.Variables.content.openLoanAccountInfo[indexRecord].disburseAmount =
				TRIM(' ' FROM Environment.Variables.content.openLoanAccountInfo[indexRecord].disburseAmount);
			
			DECLARE reffDataApproveAmount REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].approveAmount;
			CALL replaceMinus(reffDataApproveAmount,reffDataApproveAmount);
			
			DECLARE reffDataOutsatndingAmount REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].outsatndingAmount;
			CALL replaceMinus(reffDataOutsatndingAmount,reffDataOutsatndingAmount);
			
			DECLARE reffDataArrear REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].arrear;
			CALL replaceMinus(reffDataArrear,reffDataArrear);
			
			DECLARE reffDataEffectiveBalance REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].effectiveBalance;
			CALL replaceMinus(reffDataEffectiveBalance,reffDataEffectiveBalance);
			
			DECLARE reffDataDisburseAmount REFERENCE TO Environment.Variables.content.openLoanAccountInfo[indexRecord].disburseAmount;
			CALL replaceMinus(reffDataDisburseAmount,reffDataDisburseAmount);
			
		 ELSEIF index = lastIndex THEN
			DECLARE refffooterOpenLoanAcc reference to InputRoot.MRM.footerOpenLoanAcc.*[1];
			WHILE(LASTMOVE(refffooterOpenLoanAcc)) DO
				DECLARE fieldName2 		CHAR FIELDNAME(refffooterOpenLoanAcc);
				SET Environment.Variables.content.{fieldName2}							= InputRoot.MRM.footerOpenLoanAcc.{fieldName2};
				
				SET Environment.Variables.content.totAprvAmt =
					TRIM(' ' FROM Environment.Variables.content.totAprvAmt);
				SET Environment.Variables.content.totOutstd =
					TRIM(' ' FROM Environment.Variables.content.totOutstd);
				SET Environment.Variables.content.totArrear =
					TRIM(' ' FROM Environment.Variables.content.totArrear);
				
				DECLARE reffDataTotAprvAmt REFERENCE TO Environment.Variables.content.totAprvAmt;
				CALL replaceMinus(reffDataTotAprvAmt,reffDataTotAprvAmt);
				DECLARE reffDataTotOutstd REFERENCE TO Environment.Variables.content.totOutstd;
				CALL replaceMinus(reffDataTotOutstd,reffDataTotOutstd);
				DECLARE reffDataTotArrear REFERENCE TO Environment.Variables.content.totArrear;
				CALL replaceMinus(reffDataTotArrear,reffDataTotArrear);
				
				
				MOVE refffooterOpenLoanAcc NEXTSIBLING;
			END WHILE;
		END IF;
		
		IF flag = TRUE THEN	
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			SET OutputRoot.XMLNSC.content 												= Environment.Variables.content;														
			SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 				= xsi;
			SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 					= 'bo:CompiledOpenLoanAccountListRes'; 
		ELSE
			RETURN FALSE;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
