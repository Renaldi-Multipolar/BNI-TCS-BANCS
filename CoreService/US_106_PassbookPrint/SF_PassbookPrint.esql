BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common,id.co.bni.mf.common.core;


CREATE COMPUTE MODULE SF_PassbookPrint_CN_divideMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE totalLengthMsg,totalBodyLength,numberRecordData,cutRecordHeader,cutStartRecordData,cutEndRecordData INTEGER;
		DECLARE MessageBody,RecordHeaderMsg,newRecord ROW;
		DECLARE headerLength INTEGER 89;--panjang dari message header
		DECLARE recordDataLength INTEGER 251; -- panjang dari response message
		DECLARE okTailLength INTEGER 78;
		DECLARE index INTEGER 1;
		DECLARE flag BOOLEAN FALSE;
		
		CALL CopyMessageHeaders();
		
		SET totalLengthMsg								= LENGTH(InputRoot.BLOB.BLOB); --input message berupa blob
		SET cutStartRecordData  						= headerLength +1;
		SET totalBodyLength 							= totalLengthMsg - headerLength;
		SET Environment.Variables.indexRecordData 	    = 1;
		SET cutRecordHeader								= headerLength + 1;
		
		SET MessageBody      							= InputRoot.BLOB.BLOB;
		SET numberRecordData 							= ((totalLengthMsg - (headerLength + okTailLength))/recordDataLength);
		SET Environment.Variables.IndexLastRecordData 	= numberRecordData;
		
		WHILE index <= numberRecordData DO
		
			SET Environment.Variables.indexRecordData 		= index;
			SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR recordDataLength-2);
			SET OutputRoot.BLOB.BLOB 						= newRecord;
			SET cutEndRecordData 							= cutStartRecordData + recordDataLength;
			SET cutStartRecordData							= cutEndRecordData;	
			
		    IF index = numberRecordData THEN
			--	SET Environment.Variables.indexRecordData 		= index;
				--SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR lastRecordDataLength);
				--SET OutputRoot.BLOB.BLOB 						= newRecord;
				--SET cutEndRecordData 							= cutStartRecordData + lastRecordDataLength;
				--SET cutStartRecordData							= cutEndRecordData;
				SET flag										= TRUE;
				SET Environment.Variables.flag 					= flag;

				--PROPAGATE TO LABEL 'virtualAccountInformation' FINALIZE DEFAULT DELETE NONE;
			END IF;
			PROPAGATE TO LABEL 'passbookItem' FINALIZE DEFAULT DELETE NONE;
			
			SET index = index + 1;	
			
		END WHILE;
		RETURN TRUE;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE SF_PassbookPrint_CN_messageTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE xsi NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo NAMESPACE 'http://service.bni.co.id/core/bo';
		
		DECLARE index 		REFERENCE TO Environment.Variables.indexRecordData;
		DECLARE lastIndex	REFERENCE TO Environment.Variables.IndexLastRecordData;
		DECLARE flag  		REFERENCE TO Environment.Variables.flag;
				
		
		CALL CopyMessageHeaders();
		
		--Parse messages to msxd VAInfo while index start from 1 to lastindex
         IF index <= lastIndex THEN
			DECLARE indexRecord INTEGER;
			--SET indexRecord = index - 1;
			SET indexRecord = index;
			SET Environment.Variables.content.passbookItem[indexRecord] = InputRoot.MRM.passbookPrintItem;
			
			--edit format
			DECLARE dateValue REFERENCE TO Environment.Variables.content.passbookItem[indexRecord].date;
			IF dateValue = '' OR SUBSTRING(dateValue FROM 1 FOR 2) > 31 THEN	
				SET Environment.Variables.content.passbookItem[indexRecord].date = '';
			ELSE
				DECLARE date1 DATE CAST(InputRoot.MRM.passbookPrintItem.date AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'dd/MM/yy');
				SET Environment.Variables.content.passbookItem[indexRecord].date = date2;
			END IF;
		 --edit date format
		 
		SET Environment.Variables.content.filler		= NULL;
		SET Environment.Variables.content.function		= NULL;

		END IF;
		
		--when flag is true, it's last message and ready parse to xml format by read xml document in wsrr
		IF flag = TRUE THEN	
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			SET OutputRoot.XMLNSC.content 												= Environment.Variables.content;
			
			/*DECLARE fromDateValue    REFERENCE TO OutputRoot.XMLNSC.content.fromDate;
			IF SUBSTRING(fromDateValue FROM 1 FOR 2) > 31 THEN	
				SET OutputRoot.XMLNSC.content.fromDate = '';
			ELSE
				--DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.fromDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.fromDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'dd/MM/yyyy');
				SET OutputRoot.XMLNSC.content.fromDate = date2;
			END IF;
			
			DECLARE toDateValue    REFERENCE TO OutputRoot.XMLNSC.content.toDate;
			IF SUBSTRING(toDateValue FROM 1 FOR 2) > 31 THEN	
				SET OutputRoot.XMLNSC.content.toDate = '';
			ELSE
				--DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.toDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date1 DATE CAST(OutputRoot.XMLNSC.content.toDate AS DATE FORMAT 'ddMMyyyy');
				DECLARE date2 CHARACTER CAST(date1 AS CHARACTER FORMAT 'dd/MM/yyyy');
				SET OutputRoot.XMLNSC.content.toDate = date2;
			END IF;	
			*/											
			SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 				= xsi;
			SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 					= 'bo:CompiledPassbookPrintRes'; 
		ELSE
			RETURN FALSE;
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
