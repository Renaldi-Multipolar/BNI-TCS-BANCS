BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common;
/*
 *
 * File name: SF_OpenAccountList.esql
 *
 * Purpose  : Transfrom Message Response OpenAccountList from ICONS (BANCS) to XML format
 *
 * Authors  : Ariadana
 *            
 * Date     : March 2011
 * Version  : 1.0
 *
 * @copyright  PT Bank Negara Indonesia. 2011.  All rights reserved.
 *
 */


/*
 * This module used to parse record response message
 */
 

CREATE COMPUTE MODULE OpenAccountListFlow_CN_parseOneRecord
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		DECLARE openAccountInfo 			ROW;
		DECLARE content 					ROW;
		DECLARE recordHeader 				ROW;
		DECLARE START_OPEN_ACCOUNT 			INTEGER 90;
		DECLARE ONE_RECORD_SIZE 			INTEGER 153; -- Value change from 148 to 153
		DECLARE numberOfElements 			INTEGER;
		DECLARE leftIndex 					INTEGER;
		DECLARE openAccountInfoSize 		INTEGER;
		DECLARE fromValue 					INTEGER 1;
		DECLARE FROM_RECORD_HEADER 			INTEGER 90;
		DECLARE FOR_RECORD_HEADER 			INTEGER 169;
		DECLARE FROM_OPEN_ACCOUNT_INFO 		INTEGER 259;
		DECLARE FOR_OPEN_ACCOUNT_INFO 		INTEGER 153;-- Value change from 148 to 153
		
		SET content.value 						= InputRoot.BLOB.BLOB;
		SET recordHeader.value 					= SUBSTRING(content.value FROM FROM_RECORD_HEADER FOR FOR_RECORD_HEADER);
		SET Environment.Variables.firstFlag 	= 'Y';   --- To indicate that this is record header
		SET OutputRoot.BLOB.BLOB 				= recordHeader.value;
		PROPAGATE TO LABEL 'recordHeader' DELETE NONE;   --- Sending record header to be parsed to MRM
		
		SET Environment.Variables.storedBlob 	= InputRoot.BLOB.BLOB;
		IF Environment.Variables.firstFlag		= 'N' THEN --- Is not a record header, then set openAccountInfo
			
			SET openAccountInfo.value 			= SUBSTRING(content.value FROM FROM_OPEN_ACCOUNT_INFO);
			SET openAccountInfoSize 			= LENGTH(openAccountInfo.value);
			SET numberOfElements 				= ROUND(openAccountInfoSize/ONE_RECORD_SIZE, 0 MODE ROUND_UP);
		
			DECLARE recordCounter INTEGER 1;
			
			LoopEachRecord : WHILE recordCounter <= numberOfElements DO   --- Loop each <openAccountInfo> in response
				SET OutputRoot.BLOB.BLOB 			= SUBSTRING(openAccountInfo.value FROM fromValue FOR FOR_OPEN_ACCOUNT_INFO);
 			IF recordCounter = numberOfElements THEN --- last <openAccountInfo>
 				SET Environment.Variables.lastFlag 	= 'Y';
 			END IF;
  			PROPAGATE TO LABEL 'openAccountInfo' DELETE NONE;   --- Send <openAccountInfo> to be parsed by MRM
  			
  			IF Environment.Variables.lastFlag = 'Y' THEN
  				SET Environment.Variables.lastFlag 	= 'N'; --- reset last flag
  				RETURN FALSE; --- END PROPAGATION
  			END IF;
  		
  			SET fromValue 		= (recordCounter * ONE_RECORD_SIZE) + 1;
  			SET recordCounter 	= recordCounter + 1;
  		
  			END WHILE LoopEachRecord;
		END IF;
		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


/*
 * This module used to set response message to environment variable after divide message process
 */
 
CREATE COMPUTE MODULE OpenAccountListFlow_CN_storeToEnvVariable
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE xsi 					NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo 						NAMESPACE 'http://service.bni.co.id/core/bo';
		DECLARE openAccountInfoCounter 	INTEGER; --- counter for open account info
		DECLARE fillerOccur 			INTEGER; --- How many filler in the xml
		
		CALL CopyMessageHeaders();
		
		IF Environment.Variables.firstFlag = 'Y' THEN
			SET OutputRoot.BLOB.BLOB 					= NULL;
			SET OutputRoot.BLOB.BLOB 					= Environment.Variables.storedBlob; --- restore original BLOB
			SET Environment.Variables.content.cifNum 	= InputRoot.MRM.cifNum;
			SET Environment.Variables.firstFlag			= 'N'; --- the record header is already being processed

			RETURN FALSE;
			
		ELSEIF Environment.Variables.firstFlag = 'N' THEN -- it is open account info, not record header
			-- propCounter is used to count <openAccountInfo> that has been propagated
			IF Environment.Variables.propCounter IS NULL THEN
				SET Environment.Variables.propCounter = 1;
			ELSE
				SET Environment.Variables.propCounter = Environment.Variables.propCounter+1;
			END IF;
			
			SET Environment.Variables.content.openAccountInfo[Environment.Variables.propCounter] = InputRoot.MRM;
			
			IF Environment.Variables.lastFlag = 'Y' THEN -- no more open account info needs to be processed
				-- Construct XMLNSC
				SET OutputRoot.XMLNSC.content.cifNum							= Environment.Variables.content.cifNum;
				SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 	= xsi;
				SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 		= 'bo:CompiledOpenAccountListRes'; 
				SET OutputRoot.XMLNSC.content.filler 							= NULL;
				SET openAccountInfoCounter 										= 1;
				
				FOR openAccount AS Environment.Variables.content.openAccountInfo[] DO --- Loop each open account info
					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter] = Environment.Variables.content.openAccountInfo[openAccountInfoCounter];
					--- Convert account type code to the correct value
					IF OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 		= 'B' THEN
						SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 	= 'LON';
					ELSEIF OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 	= 'I' THEN
						SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 	= 'DEP';
					ELSEIF OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 	= 'C' THEN
						SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].accountTypeCode 	= 'CTA';
					END IF;
				
					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].limit =
						TRIM(' ' FROM OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].limit);
					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].balance =
						TRIM(' ' FROM OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].balance);
					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].effectiveBalance =
						TRIM(' ' FROM OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].effectiveBalance);
					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].disburseAmount =
						TRIM(' ' FROM OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].disburseAmount);
						
					DECLARE reffDataBalance REFERENCE TO OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].balance;
					CALL replaceMinus(reffDataBalance,reffDataBalance);
					DECLARE reffDataLimit REFERENCE TO OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].limit;
					CALL replaceMinus(reffDataLimit,reffDataLimit);
					DECLARE reffDataEffectiveBalance REFERENCE TO OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].effectiveBalance;
					CALL replaceMinus(reffDataEffectiveBalance,reffDataEffectiveBalance);
					DECLARE reffDataDisburseAmount REFERENCE TO OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].disburseAmount;
					CALL replaceMinus(reffDataDisburseAmount,reffDataDisburseAmount);
					
					
					SET fillerOccur = CARDINALITY(OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].filler[]);
					
					DECLARE fillerCounter 	INTEGER 1;
					
					LoopEachFiller : WHILE fillerCounter <= fillerOccur DO
	 					SET OutputRoot.XMLNSC.content.openAccountInfo[openAccountInfoCounter].filler = NULL; -- remove <filler>
	 			 	SET fillerCounter = fillerCounter + 1;
	 			 	
	  				END WHILE LoopEachFiller;
	  				
	  				SET openAccountInfoCounter = openAccountInfoCounter+1;
				END FOR;
				SET OutputRoot.MRM = NULL;
	
				RETURN TRUE;
	
			END IF;
			
			RETURN FALSE;
			
		END IF;
		
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
