BROKER SCHEMA id.co.bni.mf.core.handler.list
PATH id.co.bni.common,id.co.bni.mf.common.core;
/*
 *
 * File name: SF_TermDepositRateInquiryList.esql
 *
 * Purpose  : Transfrom Message Response TermDepositRateInquiryList from ICONS (BANCS) to XML format
 *
 * Authors  : Elisabeth Sitanggang
 *            
 * Date     : October 2012
 * Version  : 1.0
 *
 * @copyright  PT Bank Negara Indonesia. 2012.  All rights reserved.
 *
 */


CREATE COMPUTE MODULE SF_TermDepositRateInquiryList_CN_divideMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	DECLARE totalLengthMsg,totalBodyLength,numberRecordData,cutRecordHeader,cutStartRecordData,cutEndRecordData INTEGER;
		DECLARE MessageBody,RecordHeaderMsg,newRecord,errCode,errMessage ROW;
		DECLARE headerLength 				INTEGER 89;
		DECLARE headerRateDetailsLength 	INTEGER 80;
		DECLARE contentRateDetailsLength 	INTEGER 80; 
		DECLARE footerRateDetailsLength 	INTEGER 78;
		DECLARE outMsg REFERENCE TO OutputRoot;
		DECLARE errorLength					INTEGER 103;
		DECLARE index INTEGER 2;
		DECLARE flag BOOLEAN FALSE;
		
		CALL CopyMessageHeaders();
		SET totalLengthMsg			= LENGTH(InputRoot.BLOB.BLOB);
		
		-- Compose Error Message
		IF totalLengthMsg = headerLength + headerRateDetailsLength + errorLength THEN
			SET OutputRoot.BLOB.BLOB = InputRoot.BLOB.BLOB;
			PROPAGATE TO LABEL 'ErrorOccured' FINALIZE NONE;
		END IF;
		
		SET cutStartRecordData  	= headerLength + headerRateDetailsLength + 1;			
		SET totalBodyLength 		= totalLengthMsg - headerLength;
		SET cutRecordHeader			= headerLength + 1;
		SET Environment.Variables.IndexContentRateDetails 	= 2;
		
		SET MessageBody      							= InputRoot.BLOB.BLOB;
		SET numberRecordData 							= ((totalLengthMsg - (headerLength+headerRateDetailsLength+footerRateDetailsLength))/contentRateDetailsLength)+2;
		SET Environment.Variables.IndexFooterRateDetails= numberRecordData; 
		
		WHILE index <= numberRecordData DO
			IF index = numberRecordData THEN
				SET Environment.Variables.IndexContentRateDetails= numberRecordData;
				SET Environment.Variables.IndexFooterRateDetails = numberRecordData;
				DECLARE numRecordData INTEGER;
				SET numRecordData = numberRecordData - 2;
				SET flag										= TRUE;
				SET Environment.Variables.flag 					= flag;
				PROPAGATE TO LABEL 'FlagIsTrue' FINALIZE DEFAULT DELETE NONE;
			ELSE
				SET Environment.Variables.IndexContentRateDetails 		= index;
				SET newRecord  									= SUBSTRING(MessageBody FROM cutStartRecordData FOR contentRateDetailsLength );
				SET OutputRoot.BLOB.BLOB 						= newRecord;
				SET cutEndRecordData 							= cutStartRecordData + contentRateDetailsLength;
				SET cutStartRecordData							= cutEndRecordData;
				PROPAGATE TO LABEL 'ContentRateDetails' FINALIZE DEFAULT DELETE NONE;
			END IF;
			SET index = index + 1;	
		END WHILE;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;


CREATE COMPUTE MODULE SF_TermDepositRateInquiryList_CN_messageTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE xsi NAMESPACE 'http://www.w3.org/2001/XMLSchema-instance';
		DECLARE bo NAMESPACE 'http://service.bni.co.id/core/bo';
		
		DECLARE index 		REFERENCE TO Environment.Variables.IndexContentRateDetails;
		DECLARE lastIndex	REFERENCE TO Environment.Variables.IndexFooterRateDetails;
		DECLARE flag  		REFERENCE TO Environment.Variables.flag;

		CALL CopyMessageHeaders();
		IF index < lastIndex THEN
			DECLARE indexRecord INTEGER;
			SET indexRecord = index - 1;
			SET  Environment.Variables.content.rateDetails[indexRecord]			= InputRoot.MRM.rateDetails;	
			SET  Environment.Variables.content.rateDetails[indexRecord].filler	= NULL;
			SET  Environment.Variables.content.rateDetails[indexRecord].filler2	= NULL;
		END IF;
		
		IF flag = TRUE THEN	
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			SET OutputRoot.XMLNSC.content 												= Environment.Variables.content;														
			SET OutputRoot.XMLNSC.content.(XMLNSC.NamespaceDecl)xmlns:xsi 				= xsi;
			SET OutputRoot.XMLNSC.content.(XMLNSC.Attribute)xsi:type 					= 'bo:CompiledTermDepositRateInquiryRes'; 
		ELSE
			RETURN FALSE;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

CREATE COMPUTE MODULE SF_TermDepositRateInquiryList_CN_errorTransform
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE headerLength 				INTEGER 89;
		DECLARE headerRateDetailsLength 	INTEGER 80;
		DECLARE errorIndex					INTEGER 5;
		DECLARE errorMessageIndex			INTEGER 12;
		DECLARE errorCode,errorMessage		CHARACTER;

		DECLARE outMsg REFERENCE TO OutputRoot;
		DECLARE errMessage CHAR CAST (InputRoot.BLOB.BLOB AS CHAR CCSID 1208);
		SET errorCode 		= SUBSTRING(errMessage from (headerLength + headerRateDetailsLength + errorIndex) for 4);
		SET errorMessage 	= SUBSTRING(errMessage from (headerLength + headerRateDetailsLength + errorMessageIndex));
		SET errorMessage	= REPLACE(TRIM(errorMessage),'"','');
		
		CALL composeAppFault(errorCode,errorMessage,outMsg);
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;